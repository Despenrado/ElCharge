package com.example.testapp.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.testapp.models.Station;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "station".
*/
public class StationDao extends AbstractDao<Station, String> {

    public static final String TABLENAME = "station";

    /**
     * Properties of entity Station.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property OwnerID = new Property(1, String.class, "ownerID", false, "OWNER_ID");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property StationName = new Property(3, String.class, "stationName", false, "STATION_NAME");
        public final static Property Latitude = new Property(4, double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(5, double.class, "longitude", false, "LONGITUDE");
        public final static Property UpdateAt = new Property(6, String.class, "updateAt", false, "UPDATE_AT");
        public final static Property Rating = new Property(7, float.class, "rating", false, "RATING");
    }

    private DaoSession daoSession;


    public StationDao(DaoConfig config) {
        super(config);
    }
    
    public StationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"station\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"OWNER_ID\" TEXT," + // 1: ownerID
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"STATION_NAME\" TEXT," + // 3: stationName
                "\"LATITUDE\" REAL NOT NULL ," + // 4: latitude
                "\"LONGITUDE\" REAL NOT NULL ," + // 5: longitude
                "\"UPDATE_AT\" TEXT," + // 6: updateAt
                "\"RATING\" REAL NOT NULL );"); // 7: rating
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"station\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Station entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String ownerID = entity.getOwnerID();
        if (ownerID != null) {
            stmt.bindString(2, ownerID);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String stationName = entity.getStationName();
        if (stationName != null) {
            stmt.bindString(4, stationName);
        }
        stmt.bindDouble(5, entity.getLatitude());
        stmt.bindDouble(6, entity.getLongitude());
 
        String updateAt = entity.getUpdateAt();
        if (updateAt != null) {
            stmt.bindString(7, updateAt);
        }
        stmt.bindDouble(8, entity.getRating());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Station entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String ownerID = entity.getOwnerID();
        if (ownerID != null) {
            stmt.bindString(2, ownerID);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String stationName = entity.getStationName();
        if (stationName != null) {
            stmt.bindString(4, stationName);
        }
        stmt.bindDouble(5, entity.getLatitude());
        stmt.bindDouble(6, entity.getLongitude());
 
        String updateAt = entity.getUpdateAt();
        if (updateAt != null) {
            stmt.bindString(7, updateAt);
        }
        stmt.bindDouble(8, entity.getRating());
    }

    @Override
    protected final void attachEntity(Station entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Station readEntity(Cursor cursor, int offset) {
        Station entity = new Station( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ownerID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // stationName
            cursor.getDouble(offset + 4), // latitude
            cursor.getDouble(offset + 5), // longitude
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // updateAt
            cursor.getFloat(offset + 7) // rating
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Station entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOwnerID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStationName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLatitude(cursor.getDouble(offset + 4));
        entity.setLongitude(cursor.getDouble(offset + 5));
        entity.setUpdateAt(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRating(cursor.getFloat(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Station entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Station entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Station entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
